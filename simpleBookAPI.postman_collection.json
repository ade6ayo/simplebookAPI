{
	"info": {
		"_postman_id": "60efad1f-1409-4fc6-8974-e0c97d7fa5f8",
		"name": "simpleBookAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34968108"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"}); //check status code\r",
							"\r",
							"// parse the response JSON\r",
							"const response = pm.response.json();\r",
							"\r",
							"//Log other properties from the response.\r",
							"console.log(response.status);\r",
							"//console.log(response['status']); //use when connecting name that contains hyphen or annotation\r",
							"\r",
							"//callback function works\r",
							"pm.test(\"Status should be OK\" , () => {\r",
							"    pm.expect (response.status).to.eql(\"OK\")\r",
							"});\r",
							"\r",
							"//skip register client post request\r",
							"postman.setNextRequest(\"List of books\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"}); //check status code first\r",
							"\r",
							"// Parse the response JSON\r",
							"const response = pm.response.json();\r",
							"\r",
							"//Log other properties from the response.\r",
							"//console.log (response['length']); //for hyphenated words\r",
							"console.log (response.length); //#1\r",
							"\r",
							"//filter function for finding available (true) books only\r",
							"const nonFictionBooks = response.filter((book) => book.available === true)\r",
							"const book = nonFictionBooks[0]; //#2\r",
							"\r",
							"//find available books\r",
							"pm.test(\"Book found\", () => {\r",
							"pm.expect(book).to.be.an('object')\r",
							"pm.expect(book.available).to.eql(true)\r",
							"});\r",
							"\r",
							"//testing if a nonfiction book is available\r",
							"pm.test(\"Affirmative, book is non-fiction\", () => {\r",
							"pm.expect(book.type).to.eql(\"non-fiction\")\r",
							"});\r",
							"\r",
							"//set variable to collection\r",
							"pm.collectionVariables.set(\"bookId\", nonFictionBooks[0].id);\r",
							"\r",
							"//parsing data from array response\r",
							"console.log (response[1].id) //#3\r",
							"\r",
							"\r",
							"pm.test(\"Length of books should be 2\" , () => {\r",
							"    pm.expect(response.length).to.eql(2)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books?type=non-fiction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "non-fiction"
						},
						{
							"key": "limit",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log (response.id);\r",
							"console.log (response[\"current-stock\"]);\r",
							"\r",
							"pm.test(\"Book 5 data shows successfully\", () => {\r",
							"    pm.expect(response.id).to.eql(5);\r",
							"});\r",
							"\r",
							"pm.test(\"Affirmative, current stock greater than zero\", () => {\r",
							"    pm.expect(response[\"current-stock\"]).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/books/:id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{bookId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 Created\",  () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log (response.created);\r",
							"\r",
							"pm.test(\"Order placed successfully\", () => {\r",
							"    pm.expect(response.created).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log (response.length);\r",
							"\r",
							"pm.test(\"Order fetch successful, there should be at least one order.\", function () {\r",
							"    pm.expect(response.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"// here I saved the ID of the last order to an environment variable\r",
							"if (response.length > 0) {\r",
							"    let lastOrderId = response[response.length - 1].id;\r",
							"    pm.environment.set(\"lastOrderId\", lastOrderId);\r",
							"    console.log(\"Last Order ID: \" + lastOrderId);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get single (last) order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json();\r",
							"\r",
							"console.log (response.id);\r",
							"\r",
							"// fetch last order id variable\r",
							"const lastOrderId = pm.environment.get(\"lastOrderId\");\r",
							"\r",
							"\r",
							"pm.test(\"Single/Last order fetch successful\", function () {\r",
							"    pm.expect(response.id).to.eql(lastOrderId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Updated customer name successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"// parse the request JSON body this time\r",
							"let requestBody = {};\r",
							"\r",
							"try {\r",
							"    if (pm.request.body && pm.request.body.raw) {\r",
							"        requestBody = JSON.parse(pm.request.body.raw);\r",
							"    }\r",
							"} catch (e) {\r",
							"    console.log(\"Error parsing request body: \", e);\r",
							"}\r",
							"\r",
							"// store customername in an environment variable\r",
							"if (requestBody.customerName) {\r",
							"    // store customer name in an environment variable\r",
							"    pm.environment.set(\"updatedCustomerName\", requestBody.customerName);\r",
							"    console.log(\"Updated Customer Name: \" + requestBody.customerName);\r",
							"    \r",
							"    pm.test(\"Updated customer name is now \" + requestBody.customerName, function () {\r",
							"        pm.expect(requestBody.customerName).to.exist;\r",
							"    });\r",
							"} else {\r",
							"    console.log(\"Customer name not found in request body.\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"ade6ayo {{$randomLastName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// fetch the lastorderID\r",
							"const lastOrderId = pm.environment.get(\"lastOrderId\");\r",
							"\r",
							"// check lastorderID exists\r",
							"pm.test(\"Last order ID should exist\", function () {\r",
							"    pm.expect(lastOrderId).to.exist;\r",
							"});\r",
							"\r",
							"// log the lastorderID in case for debugging \r",
							"console.log(\"Deleted Order ID: \" + lastOrderId);\r",
							"\r",
							"//stop runner from running request after this test\r",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Updated customer deleted successfully\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/orders/:orderId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{lastOrderId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"ade6ayo\",\r\n   \"clientEmail\": \"ade6ayo@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "e4df82782d10b6653f2a74e92031f26fba47d213447c1a81dbf916b93016f309",
			"type": "string"
		},
		{
			"key": "bookId",
			"value": ""
		}
	]
}